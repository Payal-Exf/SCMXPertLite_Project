services:
  frontend:
    build: ./frontend
    ports:
      - "8080:8080"
    networks:
      - my-app-net
    

  backend:
    build: ./Backend
    ports:
      - "8000:8000"
    depends_on:
      - kafka
      - mongodb
    env_file:
      - ./variable.env
    environment: 
      - MONGO_URL=mongodb://mongodb:27017/
    networks:
      - my-app-net
    # Restart policy to ensure if container fails it gets restarted
    restart: unless-stopped

  kafka:
    image: bitnami/kafka:latest
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      ALLOW_PLAINTEXT_LISTENER: "yes"
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
    depends_on:
      - zookeeper
    networks:
      - my-app-net
    # Restart policy to ensure if container fails it gets restarted
    restart: unless-stopped

  zookeeper:
    image: bitnami/zookeeper:latest
    ports:
      - "2181:2181"
    environment:
      ALLOW_ANONYMOUS_LOGIN: "yes" 
    networks:
      - my-app-net
    # Restart policy to ensure if container fails it gets restarted
    restart: unless-stopped

  mongodb:
    image: mongo:latest
    ports:  
      - "27017:27017"
    networks:
      - my-app-net
    #volume is created to persist data from the /data/db directory in the container to the ./data directory on the host.
    volumes:
      - ./data:/data/db
    # Restart policy to ensure if container fails it gets restarted
    restart: unless-stopped

networks:
  my-app-net:
    driver: bridge